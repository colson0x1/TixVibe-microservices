name: tests-auth

# This `on` section is going to determine when we're going to run this workflow
on:
  # We want to run this workflow anytime a PR is created
  pull_request:
    # Inside of here, we want to say that, we only want to run this job right
    # here if a PR request has been issued and that PR contains any changes
    # specifically related to the `auth` directory!
    # i.e Service specific test
    # Now if there's ever a PR, a PR gets reopened or making an update to the
    # existing PR and the files changed are inside the auth directory. Those
    # specifically any files inside the auth dir. If antything inside the auth
    # dir gets changed, then run the job, otherwise don't run anything at all.
    paths:
      - 'auth/**'

# This `jobs` section thing is going to define some number of things that we
# want to do whenever a PR is created, reopened or updated
# In particular, we want to start up some kind of virtual machine or really
# it is a container, we're going to be running on the ubuntu operating system
# and the first thing we want to do inside of our little script is, take all
# the code out of our project. That's what this `uses` step right here does.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # We're then going to setup a series of commands to run inside of our
      # project. So we put another array entry here with `run` and then we're
      # going to put in a command that is going to run all the tests inside
      # of just our Auth service.
      # NOTE: we can't just run `npm run test` because whenever we run our
      # test inside of this Github environment, we need to make sure that our
      # test suite exists automatically at some point in time. So right now,
      # our `npm run test` command is going to start up JEST inside the
      # watcher mode. So its gonna run continuously just watching for changes
      # to be made to our source code. We do not want that when we're running
      # our tests on GitHub. We want just one run of our test suite and we
      # want to exit entirely. So rather than running `npm run test` directly,
      # we're going to instead create a new script called `test:ci` that is
      # going to run our test suite exactly one time and then automatically
      # exit.
      - run: cd auth && npm install && npm run test:ci
      # There's two steps that we can run test inside of all other services
      # We can either add in some additional `run` statements.
      # That is one way to do it. But that is gonna make sure that we run
      # all of our tests in series. In other words, we're gonna run all the
      # tests for the auth service first, and then expiration, and then orders
      # and tickets and so on. In total, it might end up taking several minutes
      # to run all the different tests for our project.
      # But there's technically another way, that we can wireup all these
      # testing workflows to make them all run in paralle.
      # We can create some additional workflows that also executes on the
      # `on pull_request` event. And for each of these additional workflows
      # we create, we'll have them change into each of our other individual
      # services and run tests inside them.
      # So essentially for each individual service, we can create a different
      # Github action and thats gonna make sure that they all run in parallel
      # or essentially at the same time which is going to dramatically speed
      # up our testing process.
