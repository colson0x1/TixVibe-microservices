name: deploy-auth

on:
  # Whenever we close or merge a PR, that actually counts as a push directly
  # to the master/main branch. SO this check right here is going to run this
  # workflow whenever we merge a PR into the master/main branch.
  # Its also only going to run if it contains a change to something inside of
  # the `auth` directory.
  push:
    branches:
      - main
    paths:
      - 'auth/**'

jobs:
  # build is the name of the job id
  # A better naming convention (test workflow should have a job id of test)
  build:
    runs-on: ubuntu-latest
    steps:
      # Check out all of our code inside of our repo
      - uses: actions/checkout@v2
      - run: cd auth && docker build -t colson0x1/tixvibe-auth .
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        # Those enivironment variable aren't automatically added into this
        # as a environment variable instead, we have to tell Github that we
        # want those two secrets to be added as sepcifically environment
        # variable call DOCKER_USERNAME and DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      # Now we are authenticated with Docker so now we push the image
      - run: docker push colson0x1/tixvibe-auth
      # Install doctl into running Github container
      - uses: digitalocean/action-doctl@v2
        with:
          # This token will be provided to the above script that installs doctl
          # and we're going to get back a preinitialized version of doctl, all
          # ready to go for us.
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      # Use doctl to get the Kubernetes config and save it inside our local
      # machine i.e in this case, inside the container.
      # tixvibe is the name of the Kubernetes Cluster on Digital Ocean
      - run: doctl kubernetes cluster kubeconfig save tixvibe
      # That should give us a pre initialized copy or all the context
      # information we need and shove it into kubectl. It should also make
      # that the active context on kubectl as well.
      # So that point on, we should be able to issue commands to kubectl and
      # have them be executed against our cluster inside of Digital Ocean.

      # Now, we have to tell our deployment to update itself and use the
      # latest image that we just pushed off to Docker Hub.
      - run: kubectl rollout restart deployment auth-depl
